/**
 * Validation middleware for request validation
 * Generated by AI chat for production-ready API
 */

const validateItem = (req, res, next) => {
  const { name, description } = req.body;
  const errors = [];

  // Name validation
  if (!name) {
    errors.push('Name is required');
  } else if (typeof name !== 'string') {
    errors.push('Name must be a string');
  } else if (name.trim().length === 0) {
    errors.push('Name cannot be empty');
  } else if (name.length > 100) {
    errors.push('Name must be less than 100 characters');
  }

  // Description validation (optional)
  if (description && typeof description !== 'string') {
    errors.push('Description must be a string');
  } else if (description && description.length > 500) {
    errors.push('Description must be less than 500 characters');
  }

  if (errors.length > 0) {
    return res.status(400).json({
      error: 'Validation failed',
      message: 'Please fix the following errors:',
      errors
    });
  }

  next();
};

const validatePagination = (req, res, next) => {
  const { page, limit } = req.query;
  
  if (page && (isNaN(page) || parseInt(page) < 1)) {
    return res.status(400).json({
      error: 'Validation failed',
      message: 'Page must be a positive integer'
    });
  }
  
  if (limit && (isNaN(limit) || parseInt(limit) < 1 || parseInt(limit) > 100)) {
    return res.status(400).json({
      error: 'Validation failed',
      message: 'Limit must be between 1 and 100'
    });
  }
  
  next();
};

module.exports = {
  validateItem,
  validatePagination
};

